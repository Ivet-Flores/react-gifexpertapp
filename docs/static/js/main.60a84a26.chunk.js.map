{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","console","log","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAoB9C,OACI,sBAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAOlB,SAEE,uBACEO,KAAK,OACLC,MAAQT,EACRU,SAtBkB,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,aA2BhCZ,EAAYe,UAAY,CACpBd,c,OAAee,EAAUC,KAAKC,Y,mCCjCrBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAWH,GAF9C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAMF,EAAIE,MACVV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcbM,GAda,4CAAH,sDCDPO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAIlC,OACI,sBAAKc,UAAU,2DAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCJCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAe,IAAD,EACZlB,mBAAS,CACjCyB,KAAK,GACLa,SAAQ,IAH4B,mBAChCC,EADgC,KACzBC,EADyB,KAuBxC,OAhBAC,qBAAW,WAEPxB,EAAQC,GACHwB,MAAK,SAAAC,GAIEH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAKzB,CAACpB,IAEGqB,EDrBmBK,CAAc1B,GAAhCO,EAF6B,EAE7BA,KAAMa,EAFuB,EAEvBA,QAWd,OATAO,QAAQC,IAAIR,GAUR,yCACI,6BAAMpB,IAGJoB,GAAW,mBAAGJ,UAAU,mDAAb,wBACb,qBAAKA,UAAU,YAAf,SAEQT,EAAKE,KAAK,SAAAC,GAAG,OACT,cAAC,EAAD,eAESA,GADCA,EAAIC,aExBzBkB,EAAe,WAAM,MAGM/C,mBAAS,CAAC,eAHhB,mBAGvBgD,EAHuB,KAGXjD,EAHW,KAY9B,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAIA,6BAESiD,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCtBnC+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.60a84a26.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2 )\r\n        {\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n\r\n        // console.log('submit hecho')\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n        {/* <h1> {inputValue} </h1> */}\r\n          < input\r\n            type=\"text\"\r\n            value= {inputValue}\r\n            onChange={handleInputChange}\r\n          />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.prototype = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","/* los helpers van a ser funciones que realizan un cierto trabajo en específico, lo procesan y hacen algún return */\r\n\r\n//Esta función realiza la petición http, trae las imagenes, las procesa y puede retornarlas\r\nexport const getGifs = async( category ) => {\r\n\r\n    const url =`https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=2425JFDMselEjcNMMXIkDrRA7rd5wfnn`\r\n    const resp = await fetch (url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title:img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n   return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url } ) => {\r\n\r\n    //console.log( id, title, url );\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDown animate__slow\">\r\n            <img src={ url } alt={ title }/>\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n//import { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data, loading } = useFetchGifs( category );\r\n\r\n    console.log(loading);\r\n\r\n    /* const[images, setImages] = useState([]);\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then(imgs => setImages ( imgs ) );\r\n    }, [ category ]) */\r\n\r\n    return (\r\n        <> {/* fragment */}\r\n            <h3>{ category }</h3>\r\n\r\n        {/* condición */}\r\n            { loading && <p className=\"animate__animated animate__swing animate__slower\">Loading...</p> }\r\n            <div className=\"card-grid\">\r\n                {\r\n                    data.map( img => (\r\n                        <GifGridItem \r\n                            key={ img.id }\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }   \r\n            </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n","//los custom hooks son una forma de extraer lógica de algún componente o lógica que se quiere realizar y extraer de manera sencilla para utilizarla nuevamente\r\n\r\nimport { useState, useEffect } from 'react'\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [ state, setState ] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    //Promesa y no puede ser async\r\n    useEffect( () => {\r\n\r\n        getGifs(category)\r\n            .then(imgs => {\r\n\r\n                /* setTimeout(() => { */\r\n\r\n                    setState({\r\n                        data:imgs,\r\n                        loading:false\r\n                    })\r\n\r\n               /*  }, 3000); */\r\n            })\r\n    }, [category])\r\n\r\n    return state; //{data:[], loading: true};\r\n\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categories = ['novelas', 'suspenso', 'aventuras'];\r\n    const [categories, setCategories] = useState(['Literatura']);\r\n\r\n    // const handleAdd = () =>{\r\n    //     //HunterXHunter\r\n    //     // categories.push('HunterXHunter');    no es una buena practica\r\n    //     // console.log(categories);\r\n    //     setCategories(literario => [...literario, 'HunterXHunter'])\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            {/* comunicación entre componentes */}\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n\r\n            {/* <button onClick={ handleAdd }> Agregar </button> */}\r\n\r\n            <ol>\r\n                {\r\n                     categories.map( category => (\r\n                         <GifGrid\r\n                             key={ category }\r\n                             category={ category } \r\n                         />\r\n                     ))\r\n                    // categories.map(category => {\r\n                    //     return <li key={ category }> {category} </li>\r\n                    // })\r\n                    // categories.map( category => \r\n                        \r\n                    //     <li key={ category }> { category } </li>\r\n                    // )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}